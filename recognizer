import os, cv2
import numpy as np
from PIL import Image
import pickle




BASE_DIR = os.path.dirname(os.path.abspath(__file__))
image_dir = os.path.join(BASE_DIR,"images")

current_id = 0
label_ids = {}
y_labels = []
x_train = []

face_cascade = cv2.CascadeClassifier("E:\project\FOrg\haarcascade\haarcascade_frontalface_alt.xml")

face_recognizer = cv2.face.LBPHFaceRecognizer_create()

for root, dirs, files in os.walk(image_dir):
    for file in files:
        if file.endswith("png") or file.endswith("jpg"):
            path = os.path.join(root,file)
            label = os.path.basename(root).replace(" ", "-").lower()
            #print(label, path)
            if label in label_ids:
                pass
            else:
                label_ids[label] = current_id
                current_id += 1
            id_ = label_ids[label]
            #print(label_ids)
            pil_image = Image.open(path).convert("L")
            image_array =np.array(pil_image,"uint8")
            #print(image_array)
            faces = face_cascade.detectMultiScale(image_array,scaleFactor=1.5 )

            for x,y,w,h in faces:
                roi = image_array[y:y+h, x:x+w]
                x_train.append(roi)
                print(id_)
                y_labels.append(id_)

#print(x_train)

with open("labels.pickle",'wb') as f:
    pickle.dump(label_ids,f)

face_recognizer.train(x_train,np.array(y_labels))
face_recognizer.save("trainner.yml")

print(label_ids)


def detect_face(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    face_cascade = cv2.CascadeClassifier('opencv-files/lbpcascade_frontalface.xml')
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.2, minNeighbors=5);
    if (len(faces) == 0):
        return None, None
        
    (x, y, w, h) = faces[0]
    return gray[y:y+w, x:x+h], faces[0]

def predict(test_img):
    img = test_img.copy()
    face, rect = detect_face(img)
 
    label, confidence = face_recognizer.predict(face)
    label_ = subjects[label]
    return img
